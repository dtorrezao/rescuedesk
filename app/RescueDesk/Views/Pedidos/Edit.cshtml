@model RescueDesk.Models.Pedido
@using RescueDesk.Utils
@{
    Layout = null;
    ViewBag.Title = "Pedido";
    ViewBag.SubTitle = "Editar";
    List<SelectListItem> actividades = (List<SelectListItem>)ViewBag.TiposActividade;
    List<SelectListItem> funcionarios = (List<SelectListItem>)ViewBag.ListaFuncionarios;
    List<SelectListItem> clientes = (List<SelectListItem>)ViewBag.ListaClientes;
}
<div class="col-lg-12">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.idpedido)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="card">
            <div class="card-body card-block">
                <div class="form-group">
                    <label for="@Html.NameFor(x=>x.idpedido)" class=" form-control-label">@Html.DisplayNameFor(model => model.idpedido)</label>
                    @Html.DisplayFor(model => model.idpedido, new { htmlAttributes = new { @class = "form-control", @placeholder = "..." } })
                    @Html.ValidationMessageFor(model => model.idpedido, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label for="@Html.NameFor(x=>x.assunto)" class=" form-control-label">@Html.DisplayNameFor(model => model.assunto)</label>
                    @Html.EditorFor(model => model.assunto, new { htmlAttributes = new { @class = "form-control", @placeholder = "Introduza o assunto do pedido..." } })
                    @Html.ValidationMessageFor(model => model.assunto, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <label for="@Html.NameFor(x=>x.descricao)" class=" form-control-label">@Html.DisplayNameFor(model => model.descricao)</label>
                    @Html.EditorFor(model => model.descricao, new { htmlAttributes = new { @class = "form-control", @placeholder = "Introduza a descrição do problema..." } })
                    @Html.ValidationMessageFor(model => model.descricao, "", new { @class = "text-danger" })
                </div>
                @if (ViewHelper.IsAdmin() || ViewHelper.IsFuncionario())
                {
                    <div class="form-group">
                        <label for="@Html.NameFor(x=>x.idatividade)" class=" form-control-label">@Html.DisplayNameFor(model => model.idatividade)</label>
                        @Html.DropDownListFor(model => model.idatividade, actividades, new { @class = "form-control autoComplete" })
                        @Html.ValidationMessageFor(model => model.idatividade, "", new { @class = "text-danger" })
                    </div>
                }
                else
                {
                    @Html.HiddenFor(model => model.idatividade)
                }

                <div class="form-group">
                    <label for="@Html.NameFor(x=>x.dtpedido)" class=" form-control-label">@Html.DisplayNameFor(model => model.dtpedido)</label>
                    @Html.EditorFor(model => model.dtpedido, new { htmlAttributes = new { @disabled = "disabled", @class = "form-control", @placeholder = "..." } })
                    @Html.ValidationMessageFor(model => model.dtpedido, "", new { @class = "text-danger" })
                </div>

                @if (ViewHelper.IsAdmin() || ViewHelper.IsFuncionario())
                {
                    <div class="form-group">
                        <label for="@Html.NameFor(x=>x.dtmarcado)" class=" form-control-label">@Html.DisplayNameFor(model => model.dtmarcado)</label>
                        @Html.EditorFor(model => model.dtmarcado, new { htmlAttributes = new { @class = "form-control date", @placeholder = "...", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.dtmarcado, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="@Html.NameFor(x=>x.prioridade)" class=" form-control-label">@Html.DisplayNameFor(model => model.prioridade)</label>
                        @Html.EnumDropDownListFor(model => model.prioridade, new { @class = "form-control autoComplete", @placeholder = "..." })
                        @Html.ValidationMessageFor(model => model.prioridade, "", new { @class = "text-danger" })
                    </div>
                    @Html.HiddenFor(model => model.dtresolvido)
                    <div class="form-group">
                        <label class="checkboxAlter">
                            @if (Model.Resolvido)
                            {
                                <label for="@Html.NameFor(x=>x.Resolvido)" class=" form-control-label">@Html.DisplayNameFor(model => model.Resolvido)</label>
                                @Html.EditorFor(model => model.Resolvido, new { htmlAttributes = new { @disabled = "disabled" } });
                                <span class="checkmark"></span>

                            }
                            else
                            {
                                <label for="@Html.NameFor(x=>x.Resolvido)" class=" form-control-label">@Html.DisplayNameFor(model => model.Resolvido)</label>
                                @Html.EditorFor(model => model.Resolvido)
                                <span class="checkmark"></span>
                            }
                        </label>
                    </div>

                    <div class="form-group">
                        <label for="@Html.NameFor(x=>x.nrcontribuinte)" class=" form-control-label">@Html.DisplayNameFor(model => model.nrcontribuinte)</label>
                        @Html.DropDownListFor(model => model.nrcontribuinte, clientes, new { @class = "form-control autoComplete" })
                        @Html.ValidationMessageFor(model => model.nrcontribuinte, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="@Html.NameFor(x=>x.idfuncionario)" class=" form-control-label">@Html.DisplayNameFor(model => model.idfuncionario)</label>
                        @Html.DropDownListFor(model => model.idfuncionario, funcionarios, new { @class = "form-control autoComplete" })
                        @Html.ValidationMessageFor(model => model.idfuncionario, "", new { @class = "text-danger" })
                    </div>
                }
                else
                {
                    @Html.HiddenFor(model => model.dtlido)
                    @Html.HiddenFor(model => model.dtmarcado)
                    @Html.HiddenFor(model => model.prioridade)
                    @Html.HiddenFor(model => model.dtresolvido)
                    @Html.HiddenFor(model => model.nrcontribuinte)
                    @Html.HiddenFor(model => model.idfuncionario)
                }
                <div class="form-group">
                    <label for="@Html.NameFor(x=>x.obs)" class=" form-control-label">@Html.DisplayNameFor(model => model.obs)</label>
                    @Html.TextAreaFor(model => model.obs, new { @class = "form-control", @placeholder = "..." })
                    @Html.ValidationMessageFor(model => model.obs, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary btn-sm">
                    <i class="fa fa-dot-circle-o"></i> Editar
                </button>
                <a href="@Url.Action("Index")" class="btn btn-danger btn-sm">
                    <i class="fa fa-ban"></i> Voltar
                </a>
            </div>
        </div>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    jQuery(document).ready(function () {
        jQuery(".autoComplete").chosen({});
    });

    $.datetimepicker.setLocale('pt');

    $('.date').datetimepicker({
        format: 'd/m/Y H:i:s'
    });

    function getFormattedDate(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear().toString().slice(2);
        return day + '-' + month + '-' + year;
    }
</script>


